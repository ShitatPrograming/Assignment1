
#include<stdio.h>
void caesar(int key, char *code); //function for encrypting with caesar
void decaesark(char *code, int key); //function for decrypting caesar with a key
void decaesar(char *code); //function for decrypting caesar without a key using brute force
void sub(char *code); //function for encrypting with a sub cipher
void desub(char *code);
main(void)
{
    int k=7, e=4; /*k=key for rotation cipher when it is known. 
                    e chooses which function to perform: 
                    1-coding with caesar and key 
                    2-coding with sub using qwerty key
                    3-decoding caesar with known key
                    4-decoding caesar without key
                    5-decoding sub from qwerty key
                    */
    char code[1000]="HELLO MATE";//Enter code with capitals
    /*switch statement that calls the different functions and then prints the array*/
    switch(e)
   {
        case 1:
            caesar(k, code); // calls the function with the int k value and char array code
            printf("%s", code); //prints the string 
            break;       
        case 2:
            sub(code); // calls the function with the char array code
            printf("%s", code); //prints the string 
            break;

        case 3:
            decaesark(code, k); // calls the function with the int k value and char array code
            printf("%s", code); //prints the string 
            break;
        case 4:
            decaesar(code);//print statement inside of function because its in a for loop as it prints 26 seperate messages, choose the one in english that makes sense 
            break;          // calls the function with the char array code
        case 5:
            desub(code); // calls the function with the char array code
            printf("%s", code); //prints the string 
            break;
        default:
        printf("Invalid e value"); //retype valid e value
        
    }
   
  
  return 0;

}
/* function caesar uses the code string and int key to rotate through  
void caesar(int key, char *code)
 {
     int i; //i is counter through string
   for(i=0;i<200;i++) //goes through enter string adding key
  {
      if(code[i]>=65 && code[i]<=90)//if it is a captial letter it performs the code leaving punctuation and spaces
      {
      
      code[i]=(code[i]-65+key)%26+65; //
      }
   }
 }
 
  void decaesark(char *code, int key)
   {
        int i ;//index
  for(i=0;i<1000;i++)
  {
     if(code[i]>=65 && code[i]<=90)//if it is a captial letter
      {
      
      code[i]=(code[i]-(key%26));//%26+65;
      if(code[i]<65)
      { 
        code[i]=code[i]+26;
      }
      else if (code[i]>65)
      {
          code[i]=code[i];
      }
     
}
}
 }
 
  void decaesar(char *code)
 {
    char decoded[1000]; 
  int i, key; 
   for(key=0;key<27;key++) 
   { 
      for(i=0;i<1000;i++) 
        {
            decoded[i]=code[i];
          if(decoded[i]>=65 && decoded[i]<=95)//if it is a captial letter 
            { 
              decoded[i]=(decoded[i]-key); 
              if(decoded[i]<65) 
              {  
                decoded[i]=decoded[i]+26; 
              } 
              else if (decoded[i]>65) 
              { 
                  decoded[i]=decoded[i]; 
              } 
            } 

        } 

    printf("\n%d.Decrypted message: %s\n", (key),decoded); 

        

   } 
 }
 
 void sub(char *code)
{
    // subs in individual vaules of the sting

     

    int i=0; 
if(code[i]>=65 && code[i]<=90)
{
    for(i=0;i<200;i++) 

    { 

        switch (code[i]) 

        { 

        case 'A': 
        code[i]= 'Q'; 
            break; 
        case 'B': 
        code[i]= 'W'; 
            break; 
        case 'C': 
        code[i]= 'E'; 
            break; 
        case 'D': 
        code[i]= 'R'; 
            break; 
        case 'E': 
        code[i]= 'T'; 
            break; 
        case 'F': 
        code[i]= 'Y'; 
            break; 
        case 'G': 
        code[i]= 'U'; 
            break; 
        case 'H': 
        code[i]= 'I'; 
            break; 
        case 'I': 
        code[i]= 'O'; 
            break; 
        case 'J': 
        code[i]= 'P'; 
            break; 
        case 'K': 
        code[i]= 'A'; 
            break; 
        case 'L': 
        code[i]= 'S'; 
            break; 
        case 'M': 
        code[i]= 'D'; 
            break; 
        case 'N': 
        code[i]= 'F'; 
            break; 
        case 'O': 
        code[i]= 'G'; 
            break; 
        case 'P': 
        code[i]= 'H'; 
            break; 
        case 'Q': 
        code[i]= 'J'; 
            break; 
        case 'R': 
        code[i]= 'K'; 
            break; 
        case 'S': 
        code[i]= 'L'; 
            break; 
        case 'T': 
        code[i]= 'Z'; 
            break; 
        case 'U': 
        code[i]= 'X'; 
            break; 
        case 'V': 
        code[i]= 'C'; 
            break; 
        case 'W': 
        code[i]= 'V'; 
            break; 
        case 'X': 
        code[i]= 'B'; 
            break; 
        case 'Y': 
        code[i]= 'N'; 
            break; 
        case 'Z': 
        code[i]= 'M'; 
            break;
        default:
        code[i]=code[i];

      

   }


        } 

    } 
    
}

void desub(char *code)
{
  
    int i=0;
    if(code[i]>=65 && code[i]<=90)
    {
    for(i=0;i<200;i++)
    {
        switch (code[i])
        {
        case 'Q':
        code[i]= 'A';
            break;
        case 'W':
        code[i]= 'B';
            break;
        case 'E':
        code[i]= 'C';
            break;
        case 'R':
        code[i]= 'D';
            break;
        case 'T':
        code[i]= 'E';
            break;
        case 'Y':
        code[i]= 'F';
            break;
        case 'U':
        code[i]= 'G';
            break;
        case 'I':
        code[i]= 'H';
            break;
        case 'O':
        code[i]= 'I';
            break;
        case 'P':
        code[i]= 'J';
            break;
        case 'A':
        code[i]= 'K';
            break;
        case 'S':
        code[i]= 'L';
            break;
        case 'D':
        code[i]= 'M';
            break;
        case 'F':
        code[i]= 'N';
            break;
        case 'G':
        code[i]= 'O';
            break;
        case 'H':
        code[i]= 'P';
            break;
        case 'J':
        code[i]= 'Q';
            break;
        case 'K':
        code[i]= 'R';
            break;
        case 'L':
        code[i]= 'S';
            break;
        case 'Z':
        code[i]= 'T';
            break;
        case 'X':
        code[i]= 'U';
            break;
        case 'C':
        code[i]= 'V';
            break;
        case 'V':
        code[i]= 'W';
            break;
        case 'B':
        code[i]= 'X';
            break;
        case 'N':
        code[i]= 'Y';
            break;
        case 'M':
        code[i]= 'Z';
            break;
            
     
  }

        }
    }
}
